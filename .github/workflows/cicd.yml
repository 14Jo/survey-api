name: Deploy API to ECS

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'build.gradle'
      - 'Dockerfile'
      - 'ecs-task-definitions/api-task-definition.json'
      - '.github/workflows/deploy-api.yml'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy without changes'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: survey-api/service
  ECS_CLUSTER: survey-cluster
  ECS_SERVICE: api-service
  ECS_TASK_DEFINITION: api-task-definition.json

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write # AWS OIDC 인증을 위해 토큰 발급 권한을 부여합니다.
      contents: read   # actions/checkout이 코드를 읽을 수 있도록 권한을 부여합니다.

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Build application
      run: ./gradlew bootJar -x test

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::025861172546:role/github-actions-role # 실제 ARN으로 교체 필요
        role-session-name: GitHub-Actions-Survey-API
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Extract metadata and build image URI
      id: meta
      run: |
        ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        SHORT_SHA=${GITHUB_SHA::8}
        IMAGE_TAG="${TIMESTAMP}-${SHORT_SHA}"
        echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "image-uri=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "latest-uri=${ECR_REGISTRY}/${ECR_REPOSITORY}:latest" >> $GITHUB_OUTPUT

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        IMAGE_URI: ${{ steps.meta.outputs.image-uri }}
        LATEST_URI: ${{ steps.meta.outputs.latest-uri }}
      run: |
        docker build -t $IMAGE_URI .
        docker tag $IMAGE_URI $LATEST_URI
        docker push $IMAGE_URI
        docker push $LATEST_URI
        echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT

    - name: Update ECS Task Definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ecs-task-definitions/${{ env.ECS_TASK_DEFINITION }}
        container-name: api-container
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        
    - name: Notify deployment result
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "API 배포가 성공적으로 완료되었습니다!"
          echo "  - 이미지: ${{ steps.build-image.outputs.image }}"
          echo "  - 서비스: ${{ env.ECS_SERVICE }}"
          echo "  - 클러스터: ${{ env.ECS_CLUSTER }}"
        else
          echo "API 배포 중 오류가 발생했습니다."
        fi
