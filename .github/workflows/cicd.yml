# 워크플로우의 전체 이름을 "CI/CD Docker to EC2"로 정했음.
name: CI/CD Docker to EC2

# 언제 이 워크플로우를 실행할지 정하는 부분임.
on:
  push:
    # "main" 브랜치에 코드가 push 될 때마다 실행될 거임.
    branches: [ "main" ]

# 워크플로우가 해야 할 작업(job)들을 정의함.
jobs:
  # "build-and-deploy"라는 이름의 작업을 하나 만들었음.
  build-and-deploy:
    # 이 작업은 GitHub이 제공하는 최신 우분투 가상머신에서 돌아감.
    runs-on: ubuntu-latest

    # 테스트를 위한 서비스 컨테이너(PostgreSQL) 설정
    services:
      # 서비스의 ID를 'postgres-test'로 지정
      postgres-test:
        # postgres 16 버전 이미지를 사용
        image: postgres:16
        # 컨테이너에 필요한 환경변수 설정
        env:
          POSTGRES_USER: ljy
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          POSTGRES_DB: testdb
        # 호스트의 5432 포트와 컨테이너의 5432 포트를 연결
        ports:
          - 5432:5432
        # DB가 준비될 때까지 기다리기 위한 상태 확인 옵션
        options: >-
          --health-cmd="pg_isready --host=localhost --user=postgres --dbname=testdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    # 이 작업이 수행할 단계(step)들을 순서대로 나열함.
    steps:
      # 1단계: 코드 내려받기
      - name: Checkout
        uses: actions/checkout@v3

      # 2단계: 자바(JDK) 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      
      # 3단계: gradlew 파일에 실행 권한 주기
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      # 4단계: Gradle로 테스트 실행 (서비스 컨테이너 DB 사용)
      - name: Test with Gradle
        # gradlew 명령어로 프로젝트의 테스트를 실행함. 테스트 실패 시 여기서 중단됨.
        run: ./gradlew test
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
          SPRING_DATASOURCE_USERNAME: ljy
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
        
      # 5단계: 프로젝트 빌드 (테스트 통과 후 실행)
      - name: Build with Gradle
        run: ./gradlew build

      # 6단계: 도커 빌드 환경 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 7단계: 도커 허브 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 8단계: 도커 이미지 빌드 및 푸시
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-spring-app:latest

      # 9단계: EC2 서버에 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/my-spring-app:latest
            docker stop my-app || true
            docker rm my-app || true
            docker run -d -p 8080:8080 --name my-app \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e DB_URL=${{ secrets.DB_URL }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              ${{ secrets.DOCKERHUB_USERNAME }}/my-spring-app:latest
