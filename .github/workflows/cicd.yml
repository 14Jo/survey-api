# 워크플로우의 전체 이름을 "CI/CD Docker to EC2"로 정했음.
name: CI/CD Docker to EC2

# 언제 이 워크플로우를 실행할지 정하는 부분임.
on:
  push:
    # "main" 브랜치에 코드가 push 될 때마다 실행될 거임.
    branches: [ "main" ]

# 워크플로우가 해야 할 작업(job)들을 정의함.
jobs:
  # "build-and-deploy"라는 이름의 작업을 하나 만들었음.
  build-and-deploy:
    # 이 작업은 GitHub이 제공하는 최신 우분투 가상머신에서 돌아감.
    runs-on: ubuntu-latest

    # 테스트를 위한 서비스 컨테이너들 설정
    services:
      # PostgreSQL 서비스
      postgres-test:
        image: postgres:16
        env:
          POSTGRES_USER: ljy
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready --host=localhost --user=ljy --dbname=testdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      # Redis 서비스
      redis-test:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      # MongoDB 서비스
      mongodb-test:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: test_user
          MONGO_INITDB_ROOT_PASSWORD: test_password
          MONGO_INITDB_DATABASE: test_survey_db
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh mongodb://test_user:test_password@localhost:27017/test_survey_db?authSource=admin --eval 'db.adminCommand(\"ping\")'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    # 이 작업이 수행할 단계(step)들을 순서대로 나열함.
    steps:
      # 1단계: 코드 내려받기
      - name: Checkout
        uses: actions/checkout@v3

      # 2단계: 자바(JDK) 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      
      # 3단계: gradlew 파일에 실행 권한 주기
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      # 4단계: 서비스 컨테이너들 준비 대기
      - name: Wait for services to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U ljy -d testdb; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL... ($i/30)"
            sleep 2
          done
          
          echo "Waiting for Redis to be ready..."
          for i in {1..30}; do
            if redis-cli -h localhost -p 6379 ping; then
              echo "Redis is ready!"
              break
            fi
            echo "Waiting for Redis... ($i/30)"
            sleep 2
          done
          
          echo "Waiting for MongoDB to be ready..."
          for i in {1..30}; do
            if mongosh mongodb://test_user:test_password@localhost:27017/test_survey_db?authSource=admin --eval "db.adminCommand('ping')" --quiet; then
              echo "MongoDB is ready!"
              break
            fi
            echo "Waiting for MongoDB... ($i/30)"
            sleep 2
          done
        
      # 5단계: Gradle로 테스트 실행
      - name: Test with Gradle
        run: ./gradlew test
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
          SPRING_DATASOURCE_USERNAME: ljy
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          SECRET_KEY: test-secret-key-for-testing-only
          ACTION_REDIS_HOST: localhost
          ACTION_REDIS_PORT: 6379
          MONGODB_URI: mongodb://test_user:test_password@localhost:27017/test_survey_db?authSource=admin
          MONGODB_DATABASE: test_survey_db

      # 6단계: 프로젝트 빌드
      - name: Build with Gradle
        run: ./gradlew build

      # 7단계: 도커 빌드 환경 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 8단계: 도커 허브 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 9단계: 도커 이미지 빌드 및 푸시
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-spring-app:latest

      # 10단계: EC2 서버에 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # EC2 서버에서도 Docker Hub에 로그인해야 이미지를 받을 수 있음.
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            # Docker Hub에서 방금 올린 최신 버전의 이미지를 내려받음.
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/my-spring-app:latest
            # 기존에 실행 중이던 'my-app' 컨테이너가 있으면 중지시킴. 없으면 그냥 넘어감.
            docker stop my-app || true
            # 기존 'my-app' 컨테이너가 있으면 삭제함. 없으면 그냥 넘어감.
            docker rm my-app || true
            # 새로 받은 이미지로 'my-app'이라는 이름의 컨테이너를 실행함.
            # -d: 백그라운드에서 실행, -p 8080:8080: 포트 연결
            docker run -d -p 8080:8080 --name my-app \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -e DB_PORT=${{ secrets.DB_PORT }} \
              -e DB_SCHEME=${{ secrets.DB_SCHEME }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
              -e REDIS_PORT=${{ secrets.REDIS_PORT }} \
              -e MONGODB_HOST=${{ secrets.MONGODB_HOST }} \
              -e MONGODB_PORT=${{ secrets.MONGODB_PORT }} \
              -e MONGODB_DATABASE=${{ secrets.MONGODB_DATABASE }} \
              -e MONGODB_USERNAME=${{ secrets.MONGODB_USERNAME }} \
              -e MONGODB_PASSWORD=${{ secrets.MONGODB_PASSWORD }} \
              -e MONGODB_AUTHDB=${{ secrets.MONGODB_AUTHDB }} \
              -e SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
              -e CLIENT_ID=${{ secrets.CLIENT_ID }} \
              -e REDIRECT_URL=${{ secrets.REDIRECT_URL }} \
              ${{ secrets.DOCKERHUB_USERNAME }}/my-spring-app:latest
